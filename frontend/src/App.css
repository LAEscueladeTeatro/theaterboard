/* App.css - Estilos adicionales y específicos de componentes de App */

/* Contenedor para la página de inicio */
.home-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  flex-grow: 1; /* Para que ocupe el espacio vertical disponible en main */
  padding: 2rem;
  text-align: center;
}

.home-title {
  font-size: 3.5rem; /* Más grande */
  font-weight: 700;
  color: var(--text-color-light);
  margin-bottom: 2.5rem;
  letter-spacing: 1px;
}

/* Estilo base para botones de acción principales */
.btn-action {
  display: inline-flex; /* Para alinear ícono y texto */
  align-items: center;
  justify-content: center;
  padding: 0.8em 1.8em; /* Ajustar padding */
  font-size: 1.1rem; /* Ligeramente más grande */
  font-weight: 500; /* Semi-bold */
  color: var(--text-color-light) !important; /* Forzar color de texto para Links */
  border-radius: var(--border-radius-pill); /* Totalmente redondeado */
  border: none;
  cursor: pointer;
  text-decoration: none; /* Para los <Link> que se vean como botones */
  transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.2s ease;
  margin-bottom: 1.2rem; /* Espacio entre botones */
  min-width: 280px; /* Ancho mínimo para consistencia */
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
}
/* Forzar que el texto de Link dentro de btn-action sea blanco */
.btn-action a, .btn-action a:visited {
  color: var(--text-color-light) !important;
  text-decoration: none !important;
}


.btn-action:hover {
  transform: translateY(-2px); /* Efecto hover sutil */
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.25);
}

.btn-action:active {
  transform: translateY(0px);
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
}

.btn-action .icon { /* Estilos para los SVGs definidos como componentes */
  margin-right: 0.75em;
  width: 20px; /* Tamaño por defecto para iconos en botones grandes */
  height: 20px;
  vertical-align: middle; /* Mejor alineación */
}

/* Colores específicos para botones */
.btn-teacher {
  background-color: var(--primary-color-teacher);
}
.btn-teacher:hover {
  background-color: color-mix(in srgb, var(--primary-color-teacher) 90%, #000000 10%);
}

.btn-student {
  background-color: var(--primary-color-student);
}
.btn-student:hover {
  background-color: color-mix(in srgb, var(--primary-color-student) 90%, #000000 10%);
}

.btn-register {
  background-color: var(--primary-color-register);
}
.btn-register:hover {
  background-color: color-mix(in srgb, var(--primary-color-register) 90%, #000000 10%);
}

/* Estilos para el header y footer */
header {
  background-color: rgba(10, 10, 20, 0.5);
  padding: 1rem 2rem;
  text-align: center;
  box-shadow: 0 2px 10px rgba(0,0,0,0.3);
  width: 100%;
}

header .app-title-header {
  color: var(--text-color-light);
  font-size: 1.8rem;
  margin: 0;
  font-weight: 500;
}

header nav {
  margin-top: 0.5rem;
}

header nav a {
  color: var(--text-color-main);
  margin: 0 0.75rem;
  font-weight: 400;
  font-size: 0.95rem;
}
header nav a:hover {
  color: var(--primary-color-teacher);
}

main {
  flex-grow: 1;
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
}

footer {
  background-color: rgba(10, 10, 20, 0.5);
  padding: 1rem;
  text-align: center;
  color: var(--text-color-main);
  font-size: 0.9rem;
  width: 100%;
}

/* Estilos para páginas de login y otras con tarjetas centradas */
.centered-form-page {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  flex-grow: 1;
  padding: 2rem;
  width: 100%; /* Asegurar que ocupe el ancho para centrar la tarjeta */
}

.form-card {
  background-color: var(--container-background);
  padding: 2.5rem 2rem;
  border-radius: var(--border-radius-medium);
  box-shadow: 0 8px 30px rgba(0,0,0,0.3);
  width: 100%;
  max-width: 450px;
  text-align: center;
}

.form-card h2 {
  font-size: 1.8rem;
  margin-bottom: 1.8rem;
  color: var(--text-color-light);
}

.form-card form div:not(.modal-actions) {
  margin-bottom: 1.2rem;
  text-align: left;
}

.form-card label {
  display: block;
  font-size: 0.9rem;
  color: var(--text-color-main);
  margin-bottom: 0.4rem;
  font-weight: 500;
}

.form-card input[type="email"],
.form-card input[type="password"],
.form-card input[type="text"] {
  padding: 0.8em 1em;
}

.form-card .btn-action {
  width: 100%;
  margin-top: 1rem;
  padding: 0.9em 1.8em;
}

.form-card .secondary-link {
  display: block;
  margin-top: 1.5rem;
  font-size: 0.9rem;
  color: var(--text-color-main);
}

.form-card .secondary-link:hover {
  color: var(--primary-color-student);
  text-decoration: underline;
}

/* Estilos para el Dashboard del Docente */
.dashboard-page-container {
  padding: 2rem;
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
}

.dashboard-page-container h2 {
  text-align: center;
  margin-bottom: 2.5rem;
  font-size: 2.2rem;
}

.dashboard-actions-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 1.5rem;
  list-style: none;
  padding: 0;
  margin: 0;
}

.dashboard-action-card {
  background-color: var(--container-background);
  padding: 1.8rem 1.5rem;
  border-radius: var(--border-radius-medium);
  color: var(--text-color-light) !important;
  text-decoration: none;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-align: center;
  border: 1px solid var(--border-color-subtle);
  transition: background-color 0.25s ease, transform 0.2s ease, box-shadow 0.25s ease, border-color 0.25s ease;
  box-shadow: 0 4px 8px rgba(0,0,0,0.15);
  font-weight: 500;
  min-height: 120px;
}
.dashboard-action-card a, .dashboard-action-card a:visited {
   color: var(--text-color-light) !important;
   text-decoration: none !important;
}

.dashboard-action-card:hover {
  background-color: color-mix(in srgb, var(--primary-color-teacher) 15%, var(--container-background) 85%);
  transform: translateY(-4px);
  box-shadow: 0 7px 20px rgba(157, 78, 221, 0.2);
  border-color: var(--primary-color-teacher);
}

.dashboard-action-card.button-as-card {
  width: 100%;
  font-size: 1rem;
  font-weight: 500;
  color: var(--text-color-light);
  background-color: var(--container-background);
  border: 1px solid var(--border-color-subtle);
}
.dashboard-action-card.button-as-card:hover {
   background-color: color-mix(in srgb, var(--primary-color-teacher) 15%, var(--container-background) 85%) !important;
   border-color: var(--primary-color-teacher) !important;
}

.app-container {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  width: 100%;
}

.public-registration-page .form-card {
  max-width: 800px;
  text-align: left;
}

.public-registration-page .form-card h2 {
  text-align: center;
}

.form-section {
  margin-top: 2rem;
  padding-top: 1.5rem;
  border-top: 1px solid var(--border-color-subtle);
}

.form-section-title {
  font-size: 1.3rem;
  color: var(--text-color-light);
  margin-bottom: 1.5rem;
  padding-bottom: 0.5rem;
  border-bottom: 1px solid var(--border-color-subtle);
  font-weight: 600;
}

.form-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1rem 1.5rem;
}

.form-grid div {
  margin-bottom: 0;
}

.public-registration-page .form-card textarea {
  min-height: 80px;
}

.form-footer-notes {
  margin-top: 2rem;
  padding: 1.5rem;
  border-top: 1px solid var(--border-color-subtle);
  background-color: rgba(0,0,0,0.1);
  border-radius: var(--border-radius-small);
  font-size: 0.85rem;
  color: var(--text-color-main);
}

.form-footer-notes p strong {
  color: var(--text-color-light);
  font-weight: 600;
}

.form-footer-notes ul {
  list-style-position: inside;
  padding-left: 0.5rem;
  margin-top: 0.5rem;
}

.form-footer-notes li {
  margin-bottom: 0.5rem;
}

.btn-logout {
  background-color: var(--color-danger);
  color: var(--text-color-light);
  padding: 0.7em 1.6em;
  border-radius: var(--border-radius-small);
  font-weight: 500;
  text-decoration: none;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border: 1px solid transparent;
  transition: background-color 0.2s ease, transform 0.15s ease;
}

.btn-logout .icon {
  margin-right: 0.6em;
  width: 18px;
  height: 18px;
  vertical-align: middle;
}

.btn-logout:hover {
  background-color: color-mix(in srgb, var(--color-danger) 85%, #000000 15%);
  transform: translateY(-1px);
}

.btn-logout:active {
  transform: translateY(0px);
  background-color: color-mix(in srgb, var(--color-danger) 75%, #000000 25%);
}

/* Estilos para Páginas de Contenido del Dashboard (como Asistencia, Puntuaciones) */
.content-page-container {
  padding: 2rem;
  width: 100%; /* Asegura que el contenedor intente ocupar el ancho disponible */
  max-width: 1400px;
  margin-left: auto;  /* Centrado si max-width es menor que el ancho del padre */
  margin-right: auto;
}

.content-page-container .page-title {
  text-align: center;
  margin-bottom: 0.5rem;
  font-size: 2rem;
}

.content-page-container .page-subtitle {
  text-align: center;
  margin-top: 0;
  margin-bottom: 2rem;
  font-size: 1rem;
  font-weight: 400;
  color: var(--text-color-main);
}
.content-page-container .page-subtitle strong {
    color: var(--primary-color-teacher);
    font-weight: 600;
}

.controls-section {
  background-color: var(--container-background);
  padding: 1.5rem;
  border-radius: var(--border-radius-medium);
  margin-bottom: 2rem;
  box-shadow: 0 4px 15px rgba(0,0,0,0.1);
}
.controls-section .section-title {
  margin-top: 0;
  margin-bottom: 1.2rem;
  font-size: 1.3rem;
  color: var(--text-color-light);
  border-bottom: 1px solid var(--border-color-subtle);
  padding-bottom: 0.75rem;
  font-weight: 600;
}

.controls-bar {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: center;
  gap: 1.5rem;
  margin-bottom: 1.5rem;
}

.controls-bar input[type="text"],
.controls-section select { /* Estilo unificado para select en .controls-section */
  padding: 0.7em 1em;
  flex-grow: 1;
  min-width: 200px;
  background-color: var(--input-background);
  color: var(--text-color-main);
  border: 1px solid var(--border-color-subtle);
  border-radius: var(--border-radius-small);
  font-size: 1rem; /* Heredar o definir explícitamente */
}
.controls-bar input[type="text"]:focus,
.controls-section select:focus {
  outline: none;
  border-color: var(--border-color-focus);
  background-color: var(--input-background-focus);
}


.controls-section .control-group {
    display: flex;
    align-items: center;
    gap: 0.8rem;
    flex-wrap: wrap; /* Para que se ajusten en pantallas pequeñas */
}
.controls-section .control-group label {
    margin-bottom: 0;
    white-space: nowrap;
}
.controls-section .control-group select {
    flex-grow: 1; /* Para que el select ocupe espacio */
    min-width: 180px; /* Ancho mínimo para el select */
}


.controls-section button:not(.btn-action-row) {
  background-color: var(--primary-color-teacher);
  color: var(--text-color-light);
  padding: 0.7em 1.2em;
  border-radius: var(--border-radius-small);
  font-size: 0.95rem;
  border: none;
}
.controls-section button:not(.btn-action-row) .icon {
    vertical-align: middle;
    margin-right: 0.5em;
}
.controls-section button:not(.btn-action-row):hover {
  background-color: color-mix(in srgb, var(--primary-color-teacher) 85%, #000000 15%);
}
.controls-section button:disabled {
  background-color: var(--border-color-subtle);
  color: var(--text-color-placeholder);
  cursor: not-allowed;
}

/* Estilos para Tablas */
.styled-table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
  margin-bottom: 2rem;
  font-size: 0.95rem;
  background-color: var(--container-background);
  border-radius: var(--border-radius-medium);
  overflow: hidden;
  box-shadow: 0 4px 15px rgba(0,0,0,0.1);
}

.styled-table thead th {
  background-color: rgba(0,0,0,0.2);
  color: var(--text-color-light);
  font-weight: 600;
  padding: 0.9em 1.5em;
  text-align: left;
  border-bottom: 1px solid var(--primary-color-teacher);
}
.styled-table thead th:first-child { border-top-left-radius: var(--border-radius-medium); }
.styled-table thead th:last-child { border-top-right-radius: var(--border-radius-medium); }


.styled-table tbody tr {
  border-bottom: 1px solid var(--border-color-subtle);
  transition: background-color 0.15s ease-in-out;
}

.styled-table tbody tr:last-child {
  border-bottom: none;
}

.styled-table tbody tr:hover {
  background-color: rgba(157, 78, 221, 0.08);
}

.styled-table td {
  padding: 0.8em 1.5em;
  vertical-align: middle;
  color: var(--text-color-main);
}
.styled-table td .status-text-grey {
    color: var(--text-color-placeholder);
    font-style: italic;
}
.styled-table td .status-text-red {
    color: var(--color-danger);
    font-weight: 500;
}

.styled-table td input[type="text"] {
  padding: 0.5em 0.8em;
  font-size: 0.9rem;
  max-width: 180px;
  background-color: var(--input-background-focus);
}

.btn-action-row {
  background-color: var(--primary-color-student);
  color: var(--text-color-light);
  padding: 0.5em 1em;
  font-size: 0.9rem;
  border-radius: var(--border-radius-small);
  min-width: auto;
  margin-right: 0.5rem;
  text-decoration: none;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border: none;
  cursor: pointer;
  transition: background-color 0.2s ease, transform 0.1s ease;
}
.btn-action-row:hover {
  background-color: color-mix(in srgb, var(--primary-color-student) 85%, #000000 15%);
  transform: translateY(-1px);
}
.btn-action-row:active {
    transform: translateY(0px);
}
.btn-action-row:disabled {
   background-color: var(--border-color-subtle);
   color: var(--text-color-placeholder);
   cursor: not-allowed;
}
.btn-action-row .icon {
    margin-right: 0.4em;
    width: 16px;
    height: 16px;
    vertical-align: middle;
}

/* Estilos para Modales */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.75);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1050;
  padding: 1rem;
}

.modal-content {
  background-color: var(--container-background);
  padding: 2rem;
  border-radius: var(--border-radius-medium);
  box-shadow: 0 8px 30px rgba(0,0,0,0.3);
  width: 100%;
  max-width: 550px;
  border: 1px solid var(--border-color-subtle);
}

.modal-content h3 {
  font-size: 1.6rem;
  margin-top: 0;
  margin-bottom: 1.8rem;
  text-align: center;
  color: var(--text-color-light);
}

.modal-content .form-group {
    margin-bottom: 1.2rem;
}
.modal-content .form-group label {
  font-size: 0.9rem;
  margin-bottom: 0.4rem;
  display: block;
  color: var(--text-color-main);
  font-weight: 500;
}
.modal-content .form-group input[type="radio"],
.modal-content .form-group input[type="checkbox"] {
    margin-right: 0.5rem;
    vertical-align: middle;
    accent-color: var(--primary-color-teacher);
}
.modal-content .form-group label.inline-label {
    display: inline-flex;
    align-items: center;
    margin-right: 1rem;
    font-weight: 400;
}

.modal-content select,
.modal-content textarea,
.modal-content input[type="text"] {
  margin-bottom: 1rem;
  /* Estilos base de input de index.css aplican aquí */
}
.modal-content textarea {
    min-height: 80px;
}

.modal-actions {
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
  margin-top: 2rem;
  padding-top: 1.5rem;
  border-top: 1px solid var(--border-color-subtle);
}

.modal-actions button {
  padding: 0.7em 1.4em;
  font-size: 0.95rem;
  min-width: 100px;
  border: none;
}
.modal-actions .btn-primary {
  background-color: var(--primary-color-teacher);
  color: var(--text-color-light);
}
.modal-actions .btn-primary .icon {
    vertical-align: middle;
    margin-right: 0.5em;
}
.modal-actions .btn-primary:hover {
  background-color: color-mix(in srgb, var(--primary-color-teacher) 85%, #000000 15%);
}
.modal-actions .btn-secondary {
  background-color: var(--input-background);
  color: var(--text-color-main);
  border: 1px solid var(--border-color-subtle);
}
.modal-actions .btn-secondary:hover {
  background-color: var(--border-color-subtle);
  color: var(--text-color-light);
}

.back-link {
  display: inline-block;
  margin-bottom: 1.5rem;
  color: var(--text-color-main);
  font-size: 0.95rem;
  font-weight: 500;
}
.back-link:hover {
  color: var(--primary-color-teacher);
  text-decoration: underline;
}

.bonus-awarded-message {
  color: var(--primary-color-register);
  font-weight: 500;
  margin-bottom: 1rem;
  padding: 0.75rem;
  background-color: rgba(22, 160, 133, 0.1);
  border-left: 4px solid var(--primary-color-register);
  border-radius: var(--border-radius-small);
}
.error-message-page {
    color: var(--color-danger);
    font-weight: 500;
    text-align: center;
    padding: 1rem;
    background-color: rgba(217, 83, 79, 0.1);
    border: 1px solid var(--color-danger);
    border-radius: var(--border-radius-small);
    margin-bottom: 1rem;
}

.page-header-controls {
  display: flex;
  justify-content: flex-start;
  align-items: center;
  margin-bottom: 1.5rem;
}

.page-header-controls .back-link {
  margin-bottom: 0;
}

.empty-table-message {
  text-align: center;
  padding: 2rem;
  color: var(--text-color-placeholder);
  font-style: italic;
  background-color: var(--container-background);
  border-radius: var(--border-radius-medium);
}

.current-date-display {
  text-align: center;
  margin-top: 0rem;
  margin-bottom: 2rem;
  font-size: 1.1rem;
  color: var(--text-color-main);
}
.current-date-display strong {
  color: var(--primary-color-teacher);
  font-weight: 600;
}

.modal-table {
    font-size: 0.9rem;
    background-color: transparent;
    box-shadow: none;
    border-radius: var(--border-radius-small);
}
.modal-table thead th {
    padding: 0.7em 1em;
    background-color: rgba(0,0,0,0.25);
}
.modal-table td {
    padding: 0.6em 1em;
}
.modal-table td input[type="text"] {
    max-width: none;
    font-size: 0.85rem;
}
.modal-table td .inline-label {
    font-size: 0.85rem;
}
.modal-table td input[type="checkbox"] {
    vertical-align: middle;
}

/* Iconos para botones de Puntuaciones */
.btn-score .icon {
    margin-right: 0.6em;
    width: 18px;
    height: 18px;
    vertical-align: middle;
}

.score-section-card {
  background-color: var(--container-background);
  padding: 1.5rem 2rem;
  border-radius: var(--border-radius-medium);
  margin-bottom: 2.5rem;
  box-shadow: 0 6px 20px rgba(0,0,0,0.15);
}

.score-section-card .section-title {
  margin-top: 0;
  margin-bottom: 1.5rem;
  font-size: 1.5rem;
  color: var(--text-color-light);
  border-bottom: 1px solid var(--primary-color-teacher);
  padding-bottom: 0.8rem;
  font-weight: 600;
}

.score-form-group {
  margin-bottom: 1.2rem;
}
.score-form-group label,
.student-list-label {
  display: block;
  font-size: 0.95rem;
  color: var(--text-color-main);
  margin-bottom: 0.5rem;
  font-weight: 500;
}
.score-form-group .inline-radio-group label {
    display: inline-flex;
    align-items: center;
    margin-right: 1.5rem; /* Espacio entre radios */
    font-weight: 400; /* Labels de radio menos bold */
}
.score-form-group .inline-radio-group input[type="radio"] {
    margin-right: 0.4rem;
    transform: scale(1.1);
    accent-color: var(--primary-color-teacher);
}


.student-selection-list {
  max-height: 250px; /* Reducir un poco la altura */
  overflow-y: auto;
  padding: 0.75rem; /* Más padding interno */
  border: 1px solid var(--border-color-subtle);
  border-radius: var(--border-radius-small);
  background-color: var(--input-background);
  margin-top: 0.5rem;
}
.student-selection-list div {
  padding: 0.6rem 0.5rem; /* Ajustar padding de items */
  border-bottom: 1px solid var(--border-color-subtle);
  display: flex; /* Para alinear checkbox/radio y label */
  align-items: center;
}
.student-selection-list div:last-child {
  border-bottom: none;
}
.student-selection-list label {
  font-weight: 400;
  font-size: 0.9rem;
  color: var(--text-color-main); /* Asegurar color de texto */
  margin-bottom: 0; /* Labels dentro de la lista no necesitan margen inferior */
  flex-grow: 1; /* Para que el label ocupe el espacio */
  cursor: pointer; /* Hacer todo el label clickeable */
}
.student-selection-list input[type="radio"],
.student-selection-list input[type="checkbox"] {
  margin-right: 0.8rem;
  transform: scale(1.1);
  accent-color: var(--primary-color-teacher);
  cursor: pointer;
}
.student-selection-list .student-name {
    /* Estilos adicionales para el nombre del estudiante si es necesario */
}
.student-selection-list-count {
    font-size: 0.8em;
    color: var(--text-color-placeholder);
    margin-top: 0.5rem;
    text-align: right;
}


.date-reference-note {
  font-size: 0.9em;
  color: var(--text-color-placeholder);
  margin-top: 0.5rem;
  margin-bottom: 1.5rem; /* Más espacio después de la nota */
  padding: 0.75rem 1rem;
  background-color: rgba(0,0,0,0.15); /* Un poco más oscuro */
  border-left: 3px solid var(--primary-color-student); /* Borde de acento */
  border-radius: var(--border-radius-small);
}
overwrite_file_with_block
frontend/src/pages/TeacherScoresPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import { Link } from 'react-router-dom';

// Iconos (ejemplos, se pueden definir mejor o importar)
const SaveIcon = () => <svg className="icon" viewBox="0 0 20 20" fill="currentColor" width="16" height="16"><path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm.75-11.25a.75.75 0 00-1.5 0v2.5h-2.5a.75.75 0 000 1.5h2.5v2.5a.75.75 0 001.5 0v-2.5h2.5a.75.75 0 000-1.5h-2.5v-2.5z" clipRule="evenodd" /></svg>;

const TeacherScoresPage = () => {
  const [allStudents, setAllStudents] = useState([]);
  const [presentStudents, setPresentStudents] = useState([]);
  const [loadingStudents, setLoadingStudents] = useState(true);
  const [loadingAttendance, setLoadingAttendance] = useState(false);
  const [error, setError] = useState('');
  const API_URL = 'http://localhost:3001/api';

  const getCurrentPeruDateTimeObjectForScores = () => { /* ... (igual que antes) ... */ };
  const getTodayPeruDateStringForScores = () => { /* ... (igual que antes) ... */ };
  const todayDateString = getTodayPeruDateStringForScores();

  const [groupScoreType, setGroupScoreType] = useState('ROPA_TRABAJO');
  const [groupScoreDate, setGroupScoreDate] = useState(todayDateString);
  const [groupStudentStatus, setGroupStudentStatus] = useState({});

  const [personalSelectedStudent, setPersonalSelectedStudent] = useState('');
  const [personalScoreType, setPersonalScoreType] = useState('PARTICIPACION');
  const [personalPoints, setPersonalPoints] = useState('');
  const [personalSubCategory, setPersonalSubCategory] = useState('');
  const [personalNotes, setPersonalNotes] = useState('');

  const getToken = useCallback(() => localStorage.getItem('teacherToken'), []);

  const fetchAttendanceAndFilterStudents = useCallback(async (dateForFilter) => {
    if (!dateForFilter || allStudents.length === 0) { setPresentStudents(allStudents); return; }
    setLoadingAttendance(true); setError('');
    try {
      const token = getToken();
      const response = await axios.get(`${API_URL}/attendance/status/${dateForFilter}`, { headers: { 'x-auth-token': token } });
      const attendanceRecords = response.data.attendance_records || [];
      const presentStudentIds = new Set(attendanceRecords.filter(r => r.status && !r.status.startsWith('AUSENCIA')).map(r => r.student_id));
      const filtered = allStudents.filter(student => presentStudentIds.has(student.id));
      setPresentStudents(filtered);
      const initialStatus = {};
      filtered.forEach(student => { initialStatus[student.id] = groupStudentStatus[student.id] || 'compliant'; });
      setGroupStudentStatus(initialStatus);
    } catch (err) { console.error(`Error fetching attendance for ${dateForFilter}:`, err); setError(err.response?.data?.message || err.message || `Error al cargar asistencia para ${dateForFilter}.`); setPresentStudents([]); }
    finally { setLoadingAttendance(false); }
  }, [getToken, API_URL, allStudents, groupStudentStatus]); // Agregado groupStudentStatus a dependencias

  useEffect(() => {
    const fetchAllStudents = async () => {
      setLoadingStudents(true);
      try { const token = getToken(); const response = await axios.get(`${API_URL}/admin/students?active=true`, { headers: { 'x-auth-token': token } }); setAllStudents(response.data); }
      catch (err) { console.error("Error fetching all students:", err); setError(err.response?.data?.message || err.message || 'Error al cargar lista completa de estudiantes.'); }
      finally { setLoadingStudents(false); }
    };
    fetchAllStudents();
  }, [getToken]);

  useEffect(() => { if (allStudents.length > 0) { fetchAttendanceAndFilterStudents(groupScoreDate); } }, [groupScoreDate, allStudents, fetchAttendanceAndFilterStudents]);

  const handleGroupStudentStatusChange = (studentId, status) => setGroupStudentStatus(prev => ({ ...prev, [studentId]: status }));
  const handleSpecialGroupSelection = (studentId, isSelected) => {
    if (groupScoreType === 'CINCO_VALIENTES') { const currentSelectedCount = Object.values(groupStudentStatus).filter(s => s === 'selected_for_bonus').length; if (isSelected && currentSelectedCount >= 5 && !(groupStudentStatus[studentId] === 'selected_for_bonus')) { alert("Solo puedes seleccionar hasta 5 estudiantes para 'Cinco Valientes'."); return; } }
    setGroupStudentStatus(prev => ({ ...prev, [studentId]: isSelected ? 'selected_for_bonus' : 'not_selected' }));
  };
  const countSelectedForBonus = () => Object.values(groupStudentStatus).filter(s => s === 'selected_for_bonus').length;

  const handleSubmitGroupScore = async (e) => { /* ... (lógica igual, pero usar clases en botón) ... */
    e.preventDefault(); setError(''); let payload = { score_type: groupScoreType, score_date: groupScoreDate };
    if (groupScoreType === 'CINCO_VALIENTES' || groupScoreType === 'PRIMER_GRUPO') {
      const student_ids = Object.entries(groupStudentStatus).filter(([_, status]) => status === 'selected_for_bonus').map(([studentId, _]) => studentId);
      if (student_ids.length === 0) { alert("Por favor, seleccione al menos un estudiante."); return; }
      if (groupScoreType === 'CINCO_VALIENTES' && student_ids.length > 5) { alert("'Cinco Valientes' no puede tener más de 5 estudiantes."); return; }
      payload.student_ids = student_ids;
    } else {
      const students_compliant = []; const students_non_compliant = [];
      Object.entries(groupStudentStatus).forEach(([studentId, status]) => { if (presentStudents.find(s => s.id === studentId)) { if (status === 'compliant') { students_compliant.push(studentId); } else if (status === 'non_compliant') { students_non_compliant.push(studentId); } } });
      if (students_compliant.length === 0 && students_non_compliant.length === 0) { alert("Por favor, marque el estado de al menos un estudiante presente."); return; }
      payload.students_compliant = students_compliant; payload.students_non_compliant = students_non_compliant;
    }
    try { const token = getToken(); const response = await axios.post(`${API_URL}/scores/group`, payload, { headers: { 'x-auth-token': token } }); alert(response.data.message || "Puntuaciones grupales registradas."); if (['ROPA_TRABAJO', 'LIMPIEZA', 'CINCO_VALIENTES', 'PRIMER_GRUPO'].includes(groupScoreType)) { const newStatus = {}; presentStudents.forEach(student => { newStatus[student.id] = 'compliant';}); setGroupStudentStatus(newStatus); } }
    catch (err) { console.error("Error submitting group score:", err); setError(err.response?.data?.message || err.message || 'Error al registrar puntuaciones grupales.'); alert(`Error: ${err.response?.data?.message || err.message}`); }
  };

  const handlePersonalScoreTypeChange = (e) => { setPersonalScoreType(e.target.value); setPersonalPoints(''); setPersonalSubCategory(''); setPersonalNotes(''); };
  const handleSubmitPersonalScore = async (e) => { /* ... (lógica igual, pero usar clases en botón) ... */
    e.preventDefault(); setError(''); if (!personalSelectedStudent) { alert("Por favor, seleccione un estudiante."); return; }
    let pointsToAssign = parseInt(personalPoints, 10);
    if (personalScoreType === 'PARTICIPACION') { if (personalSubCategory === 'Participativo') pointsToAssign = 2; else if (personalSubCategory === 'Apático') pointsToAssign = -1; else { alert("Seleccione el nivel de participación."); return; } }
    else if (personalScoreType === 'EXTRA') { if (isNaN(pointsToAssign) || pointsToAssign === 0) { alert("Ingrese un valor numérico de puntos (diferente de cero) para Puntos Extra."); return; } }
    else if (isNaN(pointsToAssign)) { alert("Ingrese un valor numérico para los puntos."); return; }
    try { const token = getToken(); const payload = { student_id: personalSelectedStudent, score_type: personalScoreType, score_date: groupScoreDate, points_assigned: pointsToAssign, sub_category: personalSubCategory, notes: personalNotes }; const response = await axios.post(`${API_URL}/scores/personal`, payload, { headers: { 'x-auth-token': token } }); let alertMessage = response.data.message || "Puntuación personal registrada."; if (personalScoreType === 'CONDUCTA') { let timeOutMessage = ''; if (pointsToAssign === -3) timeOutMessage = "Recuerda: Enviar al alumno un tiempo fuera de 15 minutos."; else if (pointsToAssign === -2) timeOutMessage = "Recuerda: Enviar al alumno un tiempo fuera de 10 minutos."; else if (pointsToAssign === -1) timeOutMessage = "Recuerda: Enviar al alumno un tiempo fuera de 5 minutos."; if (timeOutMessage) { alertMessage += `\n${timeOutMessage}`; } } alert(alertMessage); setPersonalSelectedStudent(''); setPersonalPoints(''); setPersonalSubCategory(''); setPersonalNotes(''); }
    catch (err) { console.error("Error submitting personal score:", err); setError(err.response?.data?.message || err.message || 'Error al registrar puntuación personal.'); alert(`Error: ${err.response?.data?.message || err.message}`); }
  };

  if (loadingStudents) return <div className="content-page-container"><p className="text-center" style={{padding: '2rem'}}>Cargando estudiantes...</p></div>;

  return (
    <div className="content-page-container">
      <div className="page-header-controls">
        <Link to="/docente/dashboard" className="back-link">&larr; Volver al Panel</Link>
      </div>
      <h2 className="page-title">Registrar Puntuaciones</h2>

      {error && <div className="error-message-page" style={{marginBottom: '1.5rem'}}>{error}</div>}

      <div className="score-section-card">
        <h3 className="section-title">Puntuaciones Grupales</h3>
        <form onSubmit={handleSubmitGroupScore}>
          <div className="score-form-group">
            <label htmlFor="groupScoreDate">Fecha para Puntuaciones:</label>
            <input type="date" id="groupScoreDate" value={groupScoreDate} onChange={(e) => setGroupScoreDate(e.target.value)} required />
          </div>
          <div className="score-form-group">
            <label htmlFor="groupScoreType">Tipo de Puntuación Grupal:</label>
            <select id="groupScoreType" value={groupScoreType} onChange={(e) => setGroupScoreType(e.target.value)}>
              <option value="ROPA_TRABAJO">Ropa de Trabajo (1 vez/día)</option>
              <option value="MATERIALES">Materiales (Acumulativo)</option>
              <option value="LIMPIEZA">Limpieza (1 vez/día)</option>
              <option value="CINCO_VALIENTES">Cinco Valientes (+1 c/u, 1 vez/día)</option>
              <option value="PRIMER_GRUPO">Primer Grupo (+1 c/u, 1 vez/día)</option>
            </select>
          </div>

          {(groupScoreType === 'ROPA_TRABAJO' || groupScoreType === 'MATERIALES' || groupScoreType === 'LIMPIEZA') && (
            <div className="score-form-group">
              <label className="student-list-label">Marcar Estudiantes (Presentes en fecha: {groupScoreDate}):</label>
              {loadingAttendance && <p className="text-center">Cargando asistencia...</p>}
              {!loadingAttendance && presentStudents.length === 0 && <p className="text-center" style={{color: 'var(--text-color-placeholder)', marginTop: '0.5rem'}}>No hay estudiantes presentes o no se cargó asistencia para esta fecha.</p>}
              {presentStudents.length > 0 &&
                <div className="student-selection-list">
                  {presentStudents.map(student => (
                    <div key={student.id}>
                      <span className="student-name">{student.full_name} ({student.id}): </span>
                      <label className="inline-label"><input type="radio" name={`group_${student.id}`} value="compliant" checked={groupStudentStatus[student.id] === 'compliant'} onChange={() => handleGroupStudentStatusChange(student.id, 'compliant')} /> Cumple (+1)</label>
                      <label className="inline-label"><input type="radio" name={`group_${student.id}`} value="non_compliant" checked={groupStudentStatus[student.id] === 'non_compliant'} onChange={() => handleGroupStudentStatusChange(student.id, 'non_compliant')} /> No Cumple (-1)</label>
                    </div>
                  ))}
                </div>
              }
            </div>
          )}

          {(groupScoreType === 'CINCO_VALIENTES' || groupScoreType === 'PRIMER_GRUPO') && (
            <div className="score-form-group">
              <label className="student-list-label">Seleccionar Estudiantes (Presentes en fecha: {groupScoreDate}):</label>
              {loadingAttendance && <p className="text-center">Cargando asistencia...</p>}
              {!loadingAttendance && presentStudents.length === 0 && <p className="text-center" style={{color: 'var(--text-color-placeholder)', marginTop: '0.5rem'}}>No hay estudiantes presentes o no se cargó asistencia para esta fecha.</p>}
              {presentStudents.length > 0 &&
                <div className="student-selection-list">
                  {presentStudents.map(student => (
                    <div key={student.id}>
                      <label>
                        <input type="checkbox" checked={groupStudentStatus[student.id] === 'selected_for_bonus'} onChange={(e) => handleSpecialGroupSelection(student.id, e.target.checked)} />
                        {student.full_name} ({student.id})
                      </label>
                    </div>
                  ))}
                </div>
              }
              {groupScoreType === 'CINCO_VALIENTES' &&
                <p className="student-selection-list-count" style={{color: countSelectedForBonus() > 5 ? 'var(--color-danger)' : 'inherit'}}>
                  Seleccionados: {countSelectedForBonus()} / 5
                </p>
              }
            </div>
          )}
          <button type="submit" className="btn-action btn-teacher" style={{width: '100%', marginTop: '1.5rem'}}><SaveIcon /> Registrar Puntuación Grupal</button>
        </form>
      </div>

      <div className="score-section-card">
        <h3 className="section-title">Puntuaciones Personales</h3>
        <form onSubmit={handleSubmitPersonalScore}>
          <div className="score-form-group">
            <label htmlFor="personalSelectedStudent">Estudiante:</label>
            <select id="personalSelectedStudent" value={personalSelectedStudent} onChange={(e) => setPersonalSelectedStudent(e.target.value)} required>
              <option value="">Seleccione un estudiante</option>
              {allStudents.map(student => ( // Usar allStudents para este selector, o filtrar por presentes si se prefiere
                <option key={student.id} value={student.id}>{student.full_name} ({student.id})</option>
              ))}
            </select>
          </div>
          <p className="date-reference-note">
            La fecha para esta puntuación personal será: <strong>{groupScoreDate}</strong> (misma que Puntuaciones Grupales).
          </p>
          <div className="score-form-group">
            <label htmlFor="personalScoreType">Tipo de Puntuación Personal:</label>
            <select id="personalScoreType" value={personalScoreType} onChange={handlePersonalScoreTypeChange}>
              <option value="PARTICIPACION">Participación</option>
              <option value="CONDUCTA">Conducta</option>
              <option value="USO_CELULAR">Uso de Celular</option>
              <option value="EXTRA">Puntos Extra</option>
            </select>
          </div>

          {personalScoreType === 'PARTICIPACION' && (
            <div className="score-form-group inline-radio-group">
              <label>Nivel de Participación:</label>
              <label><input type="radio" name="participacion_level" value="Participativo" checked={personalSubCategory === 'Participativo'} onChange={(e) => {setPersonalSubCategory(e.target.value); setPersonalPoints('2');}} /> Participativo (+2)</label>
              <label><input type="radio" name="participacion_level" value="Apático" checked={personalSubCategory === 'Apático'} onChange={(e) => {setPersonalSubCategory(e.target.value); setPersonalPoints('-1');}} /> Apático (-1)</label>
            </div>
          )}

          {personalScoreType === 'CONDUCTA' && (
            <div className="score-form-group">
              <label htmlFor="conductaPoints">Puntos por Conducta:</label>
              <select id="conductaPoints" value={personalPoints} onChange={(e) => setPersonalPoints(e.target.value)} required>
                <option value="">Seleccione puntos</option><option value="-1">-1 (Leve)</option><option value="-2">-2 (Media)</option><option value="-3">-3 (Grave)</option>
              </select>
              <div style={{marginTop: '0.8rem'}}>
                <label htmlFor="conductaSubCategory">Descripción Corta:</label>
                <input type="text" id="conductaSubCategory" value={personalSubCategory} onChange={(e) => setPersonalSubCategory(e.target.value)} placeholder="Ej: Interrupción, Falta de respeto" />
              </div>
            </div>
          )}

          {personalScoreType === 'USO_CELULAR' && (
             <div className="score-form-group">
              <label htmlFor="celularPoints">Puntos por Uso de Celular:</label>
              <select id="celularPoints" value={personalPoints} onChange={(e) => setPersonalPoints(e.target.value)} required>
                <option value="">Seleccione puntos</option><option value="-1">-1 (Advertencia)</option><option value="-3">-3 (Reiterado)</option>
              </select>
              <div style={{marginTop: '0.8rem'}}>
                <label htmlFor="celularSubCategory">Contexto:</label>
                <input type="text" id="celularSubCategory" value={personalSubCategory} onChange={(e) => setPersonalSubCategory(e.target.value)} placeholder="Ej: Durante explicación" />
              </div>
            </div>
          )}

          {personalScoreType === 'EXTRA' && (
            <div className="score-form-group">
              <label htmlFor="extraPoints">Puntos Extra (puede ser negativo):</label>
              <input type="number" id="extraPoints" value={personalPoints} onChange={(e) => setPersonalPoints(e.target.value)} placeholder="Ej: 5 o -2" required />
              <div style={{marginTop: '0.8rem'}}>
                <label htmlFor="extraSubCategory">Motivo/Descripción Breve:</label>
                <input type="text" id="extraSubCategory" value={personalSubCategory} onChange={(e) => setPersonalSubCategory(e.target.value)} placeholder="Ej: Ayuda excepcional, Trae utilería" />
              </div>
            </div>
          )}

          <div className="score-form-group">
            <label htmlFor="personalNotes">Notas Adicionales (opcional):</label>
            <textarea id="personalNotes" value={personalNotes} onChange={(e) => setPersonalNotes(e.target.value)} rows="3" placeholder="Detalles..."></textarea>
          </div>
          <button type="submit" className="btn-action btn-teacher" style={{width: '100%', marginTop: '1.5rem'}}><SaveIcon/> Registrar Puntuación Personal</button>
        </form>
      </div>
    </div>
  );
};

export default TeacherScoresPage;
